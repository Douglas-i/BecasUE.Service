// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.EstudiosAcademicos", b =>
                {
                    b.Property<int>("EstudiosAcademicosID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstudiosAcademicosID"));

                    b.Property<string>("EntidadEmisora")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("FechaFinalizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonaID")
                        .HasColumnType("int");

                    b.Property<string>("TituloObtenido")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("EstudiosAcademicosID");

                    b.HasIndex("PersonaID");

                    b.ToTable("EstudiosAcademicos");
                });

            modelBuilder.Entity("DataAccess.Entities.ExperienciaLaboral", b =>
                {
                    b.Property<int>("ExperienciaLaboralID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperienciaLaboralID"));

                    b.Property<string>("EntidadTrabajo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("FechaFinalizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonaID")
                        .HasColumnType("int");

                    b.Property<string>("Puesto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ExperienciaLaboralID");

                    b.HasIndex("PersonaID");

                    b.ToTable("ExperienciaLaboral");
                });

            modelBuilder.Entity("DataAccess.Entities.OfertaAnual", b =>
                {
                    b.Property<int>("OfertaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfertaID"));

                    b.Property<int>("Año")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("FechaApertura")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCierre")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumeroUniversidades")
                        .HasColumnType("int");

                    b.Property<string>("PaisSedePrograma")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OfertaID");

                    b.ToTable("OfertaAnual");
                });

            modelBuilder.Entity("DataAccess.Entities.Persona", b =>
                {
                    b.Property<int>("PersonaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonaID"));

                    b.Property<string>("ApellidoPersona")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombrePersona")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Pasaporte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaísPrecedencia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PersonaID");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("DataAccess.Entities.ProgramasOfertados", b =>
                {
                    b.Property<int>("ProgramaOfertadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramaOfertadoId"));

                    b.Property<DateTime>("FechaFinalazacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("Financiamiento")
                        .HasColumnType("int");

                    b.Property<decimal>("MontoAprobado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OfertaId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramaId")
                        .HasColumnType("int");

                    b.Property<int>("UniversidadId")
                        .HasColumnType("int");

                    b.HasKey("ProgramaOfertadoId");

                    b.HasIndex("OfertaId");

                    b.HasIndex("ProgramaId");

                    b.HasIndex("UniversidadId")
                        .IsUnique();

                    b.ToTable("ProgramasOfertados");
                });

            modelBuilder.Entity("DataAccess.Entities.ProgramasTitulacion", b =>
                {
                    b.Property<int>("ProgramaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramaId"));

                    b.Property<int>("CantidadCredito")
                        .HasColumnType("int");

                    b.Property<string>("Duracion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EspecialidadId")
                        .HasColumnType("int");

                    b.Property<int>("NumeroDiplomados")
                        .HasColumnType("int");

                    b.Property<string>("TituloPrograma")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProgramaId");

                    b.HasIndex("EspecialidadId");

                    b.ToTable("ProgramasTitulacion");
                });

            modelBuilder.Entity("DataAccess.Entities.Rol", b =>
                {
                    b.Property<int>("RolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolID"));

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RolID");

                    b.ToTable("Rol");
                });

            modelBuilder.Entity("DataAccess.Entities.SolicitudesAceptadas", b =>
                {
                    b.Property<int>("SolicitudAceptadaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SolicitudAceptadaId"));

                    b.Property<DateTime>("FechaAceptacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("SolicitudID")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("SolicitudAceptadaId");

                    b.HasIndex("SolicitudID")
                        .IsUnique();

                    b.ToTable("SolicitudesAceptadas");
                });

            modelBuilder.Entity("DataAccess.Entities.SolicitudesProgramas", b =>
                {
                    b.Property<int>("SolicitudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SolicitudId"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramaOfertadoId")
                        .HasColumnType("int");

                    b.Property<string>("Resumen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolicitudId");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.HasIndex("ProgramaOfertadoId")
                        .IsUnique();

                    b.ToTable("SolicitudesProgramas");
                });

            modelBuilder.Entity("DataAccess.Entities.TiposEspecialidad", b =>
                {
                    b.Property<int>("TipoEspecialidadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoEspecialidadID"));

                    b.Property<string>("NombreTipoEspecialidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TipoEspecialidadID");

                    b.ToTable("TiposEspecialidad");
                });

            modelBuilder.Entity("DataAccess.Entities.Universidad", b =>
                {
                    b.Property<int>("universidadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("universidadId"));

                    b.Property<string>("ciudad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("pais")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("universidadNombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("universidadId");

                    b.ToTable("Universidad");
                });

            modelBuilder.Entity("DataAccess.Entities.Usuario", b =>
                {
                    b.Property<int>("UsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioID"));

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaCreación")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int>("RolID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UltimaModificación")
                        .HasColumnType("datetime2");

                    b.HasKey("UsuarioID");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("DataAccess.Entities.EstudiosAcademicos", b =>
                {
                    b.HasOne("DataAccess.Entities.Persona", "Persona")
                        .WithMany("EstudiosAcademicos")
                        .HasForeignKey("PersonaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("DataAccess.Entities.ExperienciaLaboral", b =>
                {
                    b.HasOne("DataAccess.Entities.Persona", "Persona")
                        .WithMany("ExperienciaLaborals")
                        .HasForeignKey("PersonaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("DataAccess.Entities.ProgramasOfertados", b =>
                {
                    b.HasOne("DataAccess.Entities.OfertaAnual", "Oferta")
                        .WithMany("ProgramasOfertados")
                        .HasForeignKey("OfertaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.ProgramasTitulacion", "Programas")
                        .WithMany("ProgramasOfertados")
                        .HasForeignKey("ProgramaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Universidad", "Universidad")
                        .WithOne("ProgramasOfertados")
                        .HasForeignKey("DataAccess.Entities.ProgramasOfertados", "UniversidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oferta");

                    b.Navigation("Programas");

                    b.Navigation("Universidad");
                });

            modelBuilder.Entity("DataAccess.Entities.ProgramasTitulacion", b =>
                {
                    b.HasOne("DataAccess.Entities.TiposEspecialidad", "Especialidad")
                        .WithMany("ProgramasTitulaciones")
                        .HasForeignKey("EspecialidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidad");
                });

            modelBuilder.Entity("DataAccess.Entities.SolicitudesAceptadas", b =>
                {
                    b.HasOne("DataAccess.Entities.SolicitudesProgramas", "SolicitudesProgramas")
                        .WithOne("SolicitudesAceptadas")
                        .HasForeignKey("DataAccess.Entities.SolicitudesAceptadas", "SolicitudID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SolicitudesProgramas");
                });

            modelBuilder.Entity("DataAccess.Entities.SolicitudesProgramas", b =>
                {
                    b.HasOne("DataAccess.Entities.Persona", "Persona")
                        .WithOne("SolicitudesProgramas")
                        .HasForeignKey("DataAccess.Entities.SolicitudesProgramas", "PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.ProgramasOfertados", "ProgramasOfertados")
                        .WithOne("SolicitudesProgramas")
                        .HasForeignKey("DataAccess.Entities.SolicitudesProgramas", "ProgramaOfertadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("ProgramasOfertados");
                });

            modelBuilder.Entity("DataAccess.Entities.Usuario", b =>
                {
                    b.HasOne("DataAccess.Entities.Persona", "Persona")
                        .WithOne("Usuario")
                        .HasForeignKey("DataAccess.Entities.Usuario", "PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("DataAccess.Entities.OfertaAnual", b =>
                {
                    b.Navigation("ProgramasOfertados");
                });

            modelBuilder.Entity("DataAccess.Entities.Persona", b =>
                {
                    b.Navigation("EstudiosAcademicos");

                    b.Navigation("ExperienciaLaborals");

                    b.Navigation("SolicitudesProgramas")
                        .IsRequired();

                    b.Navigation("Usuario")
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.ProgramasOfertados", b =>
                {
                    b.Navigation("SolicitudesProgramas")
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.ProgramasTitulacion", b =>
                {
                    b.Navigation("ProgramasOfertados");
                });

            modelBuilder.Entity("DataAccess.Entities.SolicitudesProgramas", b =>
                {
                    b.Navigation("SolicitudesAceptadas")
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.TiposEspecialidad", b =>
                {
                    b.Navigation("ProgramasTitulaciones");
                });

            modelBuilder.Entity("DataAccess.Entities.Universidad", b =>
                {
                    b.Navigation("ProgramasOfertados")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
